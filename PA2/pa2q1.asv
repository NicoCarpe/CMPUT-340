% Dataset 1
X1 = [-6.28318531 -4.96040945 -3.6376336   -2.31485774 -0.99208189  0.33069396   1.65346982   2.97624567  4.29902153   5.62179738];
Y1 = [-0.02212373  0.93174316  0.44657927  -0.71237743 -0.87719887  0.35844402   0.95673157   0.15797694 -0.92443154  -0.65275084];

% For dataset 1 our data exibits a cyclic behaviour, thus a triginometric
% basis function would be a better fit. Since the data also seems to be
% fairly sinusoidal in nature already, an approximation would likely be
% more effective in capturing the general shape of the data.



% Dataset 2
X2 = [-5.         -4.79591837 -4.59183673 -4.3877551  -4.18367347 -3.97959184  -3.7755102  -3.57142857 -3.36734694 -3.16326531 -2.95918367 -2.75510204  -2.55102041 -2.34693878 -2.14285714 -1.93877551 -1.73469388 -1.53061224  -1.32653061 -1.12244898 -0.91836735 -0.71428571 -0.51020408 -0.30612245  -0.10204082  0.10204082  0.30612245  0.51020408  0.71428571  0.91836735   1.12244898  1.32653061  1.53061224  1.73469388  1.93877551  2.14285714   2.34693878  2.55102041  2.75510204  2.95918367  3.16326531  3.36734694   3.57142857  3.7755102   3.97959184  4.18367347  4.3877551   4.59183673   4.79591837  5.        ];
Y2 = [ 1.51657986e+01  1.18834486e+01  1.14908377e+01  9.69999012e+00   8.83752995e+00  8.53654378e+00  7.26220222e+00  6.24526603e+00   6.14466521e+00  2.20438691e+00  3.02257790e+00  2.55301601e+00   1.20314417e+00  2.81993279e+00 -7.95772374e-02  5.17986596e-01  -2.02214422e+00 -1.88483645e+00 -6.00919079e-01 -1.89204707e-01   1.69449681e-02  3.91334228e-01 -1.73970249e+00 -3.19757434e-01  -6.00188224e-01  2.31330343e-01  5.82638717e-01  4.22184971e+00   3.59292410e-01  4.59202652e+00  4.71769806e+00  5.21676309e+00   6.70631069e+00  6.62448237e+00  7.35495405e+00  9.65171985e+00   9.61038903e+00  1.22648215e+01  1.29301284e+01  1.33289427e+01   1.76286428e+01  1.76382160e+01  2.07450785e+01  2.18295969e+01   2.30767522e+01  2.64519126e+01  2.74412541e+01  2.89516763e+01   3.31531920e+01  3.70987315e+01];

% For dataset 2 our data is nearly parabolic in nature, but there is a lot
% of noise in between points. This would suggest that a polynomial basis
% function would be a better choice to 


% put the dataset 1 in column format
X = X1.';
Y = Y1.';

% Find interpolations and approximations for Dataset 1 and plot
figure;
scatter(X, Y, 'o', 'filled');
hold on;  

%%% triginometric approximation %%%
trig_approx = func_fit(X, Y, 'approximation', 'trig', 5);
x_approx = linspace(min(X), max(X), 1000);
y_approx = trigval(trig_approx, x_approx);

plot(x_approx, y_approx, 'LineWidth', 1, 'DisplayName', 'Trig Approx');


%%% triginometric interpolation %%%
trig_interp = func_fit(X, Y, 'interpolation', 'trig');
x_interp = linspace(min(X), max(X), 1000);
y_interp = trigval(trig_interp, x_interp);

plot(x_interp, y_interp, 'LineWidth', 1, 'DisplayName', 'Trig Interp');

% Customize the plot
title('Approximation and Interpolation of Dataset 1');
xlabel('x');
ylabel('y');
legend('Data', 'Triginometic Approximation', 'Triginometic Interpolation');
grid on;

% Set the axis limits
xlim([min(X), max(X)]);
ylim([min(Y), max(Y)]);

hold off;  % Release the hold on the current plot



% put the dataset 2 in column format
X = X2.';
Y = Y2.';

% Find interpolations and approximations for Dataset 2 and plot
figure;
scatter(X, Y, 'o', 'filled');
hold on;  

%%% polynomial approximation %%%
poly_approx = func_fit(X, Y, 'approximation', 'poly', 5);
x_approx = linspace(min(X), max(X), 100);
% polyval needs polynomial in reverse order
poly_approx = flip(poly_approx, 1);
y_approx = polyval(poly_approx, x_approx);

plot(x_approx, y_approx, 'LineWidth', 1, 'DisplayName', 'Poly Approx');

%%% polynomial interpolation %%%
poly_interp = func_fit(X, Y, 'interpolation', 'poly');
x_interp = linspace(min(X), max(X), 100);
% polyval needs polynomial in reverse order
poly_interp = flip(poly_interp, 1);
y_interp = polyval(poly_interp, x_interp);

plot(x_interp, y_interp, 'LineWidth', 1, 'DisplayName', 'Poly Interp');

% Customize the plot
title('Approximation and Interpolation of Dataset 2');
xlabel('x');
ylabel('y');
legend('Data', 'Polynomial Approximation', 'Polynomial Interpolation');
grid on;

% Set the axis limits
xlim([min(X), max(X)]);
ylim([min(Y), max(Y)]);

hold off;  % Release the hold on the current plot



function [Y] = trigval(coefficient_vector, X)
    n = (length(coefficient_vector) - 1) / 2;
    
    % the first value is just 1 so start with Y = 1
    Y = coefficient_vector(1);

    % iteratively add each cos sin pair evaluation to the y value
    for i = 1:n
        Y = Y + coefficient_vector(2 * i) * cos(i * X) + coefficient_vector(2 * i + 1) * sin(i * X);
    end
end